name: Test Matrix
on:
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - id: gen-matrix
        name: Generate matrix
        run: |
          uuids=$(python -c "import uuid; import json; print(json.dumps([ str(uuid.uuid4()) for _ in range(3) ]))")
          matrix=$(echo "{ \"uuid\" : ${uuids} }")
          echo "matrix=${matrix}" >> $GITHUB_OUTPUT

  echo-matrix:
    runs-on: ubuntu-latest
    needs: generate-matrix
    steps:
      - name: Echo matrix
        run: |
          echo "Matrix: ${{ needs.generate-matrix.outputs.matrix }}"

  matrix-dispatch:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - id: gen-rand-sleep-time
        name: Generate sleep time
        run: |
          echo "sleep-seconds=$(shuf -i 4-10 -n 1)" >> $GITHUB_OUTPUT

      - name: Echo matrix vals
        run: |
          echo "Sleep seconds: ${{ steps.gen-rand-sleep-time.outputs.sleep-seconds }}"
          echo "UUID: ${{ matrix.uuid }}"

      - id: dispatch-sleep
        name: Dispatch random sleep workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: sleep.yaml
          inputs: '{ "uuid": "${{ matrix.uuid }}", "sleep-seconds": "${{ steps.gen-rand-sleep-time.outputs.sleep-seconds }}"}'

      - name: Wait for sleep workflow to succeed
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.sha }}
          check-name: "sleep-${{ matrix.uuid }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 2

  post-matrix:
    needs: matrix-dispatch
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get workflows overall status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Get workflow jobs
        id: get-workflow-jobs
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs
          owner: carlos-caldera
          repo: test-repo
          run_id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build failed dispatched jobs Slack message
        uses: sergeysova/jq-action@v2
        id: slack-message
        with:
          cmd: |
            data='${{ steps.get-workflow-jobs.outputs.data }}'
            echo ${data} | jq -r '.jobs[]
              | select( (.name | contains("matrix-dispatch")) and (.conclusion == "failure") )
              | .name | match("\\(([a-z0-9-]+)\\)").captures[0].string | "Failed job: sleep-" + .
              | if . != ""
                  then {type: "section", text:{type: "mrkdwn", text: . } } | @json | . + ","
                  else ""
                end'
          multiline: true

      - name: Print Slack message info
        run: |
          cat << EOF
          {
              "text": "Build status: ${{env.WORKFLOW_CONCLUSION == 'success' && 'SUCCESS' || 'FAILURE'}}"
              "blocks":[
                {
                  "type": "section",
                  "text":{
                    "type": "plain_text",
                    "text": " "
                  }
                }
              ],
              "attachments": [
                  {
                    "color": "${{env.WORKFLOW_CONCLUSION == 'success' && '#00C000' || '#E00000'}}",
                    "blocks": [
                      {
                        "type": "header",
                        "text":{
                          "type": "plain_text",
                          "text": "Build status: ${{env.WORKFLOW_CONCLUSION == 'success' && 'SUCCESS' || 'FAILURE'}}",
                          "emoji": true
                        }
                      },
                      {
                        "type": "section",
                        "text":{
                          "type": "mrkdwn",
                          "text": "*Repo:* <${{github.event.repository.html_url}}|${{github.event.repository.full_name}}>\n*Branch/Tag:* ${{github.ref_name}}\n*CI Run:* <https://github.com/starburstdata/stargate/actions/runs/${{github.run_id}}|${{github.workflow}}>"
                        }
                      },
                      ${{steps.slack-message.outputs.value}}
                      {
                        "type": "section",
                        "text":{
                          "type": "mrkdwn",
                          "text": "Start your investigation by checking the workflow run: :point_right: *<https://github.com/starburstdata/stargate/actions/runs/${{github.run_id}}|${{github.workflow}}>*"
                        }
                      }
                    ]
                  }
              ]
          }
          EOF
